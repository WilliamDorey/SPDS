
AVRASM ver. 2.2.7  E:\PROJECT\Project_test_routines\Project_test_routines\main.asm Thu May 09 11:51:35 2019

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.2.209\avrasm\inc\m8515def.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(22): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.2.209\avrasm\inc\m8515def.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(117): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\General.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(118): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\Delays.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(119): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\LCD.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(120): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\Keypad.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(121): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\Serial.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.2.209\avrasm\inc\m8515def.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(22): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.2.209\avrasm\inc\m8515def.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(117): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\General.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(118): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\Delays.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(119): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\LCD.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(120): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\Keypad.inc'
E:\PROJECT\Project_test_routines\Project_test_routines\main.asm(121): Including file 'E:\PROJECT\Project_test_routines\Project_test_routines\Serial.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8515.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8515def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8515
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8515
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8515DEF_INC_
                                 #define _M8515DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8515
                                 #pragma AVRPART ADMIN PART_NAME ATmega8515
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x06
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	EMCUCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x24
                                 .equ	ICR1H	= 0x25
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	PORTE	= 0x07
                                 .equ	DDRE	= 0x06
                                 .equ	PINE	= 0x05
                                 .equ	OSCCAL	= 0x04
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	AINBG	= ACBG	; For compatibility
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size Bit 2
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size Bit 0
                                 .equ	UCSZ1	= 2	; Character Size Bit 1
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 ; UBRRH - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 ;.equ	URSEL	= 7	; Register Select
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; EMCUCR - Extended MCU Control Register
                                 .equ	ISC2	= 0	; Interrupt Sense Control 2
                                 .equ	SRW11	= 1	; Wait State Select Bits for Upper Sector, bit 1
                                 .equ	SRW00	= 2	; Wait State Select Bits for Lower Sector, bit 0
                                 .equ	SRW01	= 3	; Wait State Select Bits for Lower Sector, bit 1
                                 .equ	SRL0	= 4	; Wait State Selector Limit bit 0
                                 .equ	SRL1	= 5	; Wait State Selector Limit bit 1
                                 .equ	SRL2	= 6	; Wait State Selector Limit bit 2
                                 .equ	SM0	= 7	; Sleep Mode Select Bit 0
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM1	= 4	; Sleep Mode Select Bit 1
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; Wait State Select Bits for Upper Sector, bit 0
                                 .equ	SRE	= 7	; External SRAM/XMEM Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	SM2	= 5	; Sleep Mode Select Bit 2
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer / Counter 1 and Timer / Counter 0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	XMM0	= 3	; External Memory High Mask Bit 0
                                 .equ	XMM1	= 4	; External Memory High Mask Bit 1
                                 .equ	XMM2	= 5	; External Memory High Mask Bit 2
                                 .equ	XMBK	= 6	; External Memory Bus Keeper Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter 0 Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter 0 Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Timer/Counter 0 Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	OCIE0	= 0	; Timer/Counter0 Output Compare Match Interrupt register
                                 .equ	TOIE0	= 1	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	OCF0	= 0	; Output Compare Flag 0
                                 .equ	TOV0	= 1	; Timer/Counter0 Overflow Flag
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TICIE1	= 3	; Timer/Counter1 Input Capture Interrupt Enable
                                 .equ	OCIE1B	= 5	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 6	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TOIE1	= 7	; Timer/Counter1 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	ICF1	= 3	; Input Capture Flag 1
                                 .equ	OCF1B	= 5	; Output Compare Flag 1B
                                 .equ	OCF1A	= 6	; Output Compare Flag 1A
                                 .equ	TOV1	= 7	; Timer/Counter1 Overflow Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 3	; Force Output Compare for Channel A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select1 bit 0
                                 .equ	CS11	= 1	; Clock Select1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Pulse Width Modulator Select Bit 2
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Pulse Width Modulator Select Bit 3
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Port E Data Register
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 
                                 ; DDRE - Port E Data Direction Register
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 
                                 ; PINE - Port E Input Pins
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WDTON	= 6	; Watchdog timer always on
                                 .equ	S8515C	= 7	; AT90S4414/8515 compabillity mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 512
                                 .equ	RAMEND	= 0x025f
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 512
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	ICP1addr	= 0x0003	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0004	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0005	; Timer/Counter1 Compare MatchB
                                 .equ	OVF1addr	= 0x0006	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0007	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0008	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0009	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000a	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000b	; USART, Tx Complete
                                 .equ	ACIaddr	= 0x000c	; Analog Comparator
                                 .equ	INT2addr	= 0x000d	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x000e	; Timer 0 Compare Match
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	SPMRaddr	= 0x0010	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 17	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8515DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;File: Project_test_routines.asm
                                 ;Author: William Dorey
                                 ;
                                 ;Description:	A compilation of different subroutines
                                 ;				used to test the individual modules 
                                 ;				connected to the micrcontroller
                                 ;
                                 ; Bus Map:
                                 ;	Keypad=	$1XXX
                                 ;	LCD=	$2XXX
                                 ;	ADC=	$7XXX
                                 
                                 ; Data Segment
                                 .dseg
                                 .org $0100
000100                           code_saved: .byte 6
000106                           code_attempt: .byte 6
                                 
                                 ;Code segment
                                 .cseg
                                 .INCLUDE "m8515def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8515.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8515def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8515
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8515
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8515DEF_INC_
                                 #endif  /* _M8515DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .EQU BAUD = 25   ; 2400bps
                                 .EQU UCTLB = $18 ; Tx Rx enabled
                                 .EQU FRAME = $86 ; Asynchronous, No Parity, 1 Stop bit, 8 Data bits
                                 
000000 c01d                      reset:	RJMP init
000001 c050                      		RJMP isr0
                                 		.ORG $1E
                                 init:
00001e e50f                      		LDI R16, LOW(RAMEND)	; Initialize Stack Pointer
00001f bf0d                      		OUT SPL, R16
000020 e002                      		LDI R16, HIGH(RAMEND)
000021 bf0e                      		OUT SPH, R16
                                 
000022 e400                      		LDI R16, (1<<INT0)		; Enable INT0
000023 bf0b                      		OUT GICR, R16
                                 
000024 e802                      		LDI R16, $82			; Initialize Data Buses and Interrupt for falling edge of int0
000025 bf05                      		OUT MCUCR, R16
                                 
000026 d0d3                      		RCALL init_uart			; Initialize Serial Communication
000027 d09d                      		RCALL init_LCD
                                 
000028 e431                      		LDI R19, $41
                                 
                                 banner:
000029 e09e                      		LDI R25, 14
00002a ebe8                      		LDI R30, LOW(LCD_TEST<<1)
00002b e0f0                      		LDI R31, HIGH(LCD_TEST<<1)
00002c d0ad                      		RCALL LCD_text
                                 
00002d d07c                      		rcall delay_1_52ms
00002e ec00                      		LDI R16, $C0
00002f 9300 2000                 		STS LCD_CONTROL, R16
                                 
                                 main:
                                 ;		RCALL adc_
000031 d001                      		RCALL key_
                                 ;		RCALL TxRx_
                                 		
                                 fini:
000032 cfff                      		RJMP fini
                                 
                                 ;
                                 key_:
000033 e09a                      		LDI R25, 10
000034 ecec                      		LDI R30, LOW(KEY_TEST<<1)
000035 e0f0                      		LDI R31, HIGH(KEY_TEST<<1)
000036 d0a3                      		RCALL LCD_text
000037 9478                      		SEI
000038 9508                      		RET
                                 ;
                                 adc_:
000039 ef0f                      		LDI R16, $FF		; ADC Kickstart
00003a 9300 1000                 		STS $1000, R16
                                 
00003c e095                      		LDI R25, 5
00003d ece6                      		LDI R30, LOW(ADC_TEST<<1)
00003e e0f0                      		LDI R31, HIGH(ADC_TEST<<1)
00003f d09a                      		RCALL LCD_text
                                 start_adc:
000040 9100 7000                 		LDS R16, $7000
000042 d02e                      		RCALL hex2asc
000043 d04f                      		RCALL delay_1ms
000044 9310 2100                 		STS LCD_OUT, R17
000046 d04c                      		RCALL delay_1ms
000047 9300 2100                 		STS LCD_OUT, R16
000049 e100                      		LDI R16, $10
00004a d05f                      		RCALL delay_1_52ms
00004b 9300 2000                 		STS LCD_CONTROL, R16
00004d d05c                      		RCALL delay_1_52ms
00004e 9300 2000                 		STS LCD_CONTROL, R16
000050 cfef                      		RJMP start_adc
000051 9508                      		RET
                                 
                                 ;
                                 ; Purpose: Interrupt subroutine to read incoming keypad entries
                                 ;
                                 isr0:
000052 9100 1000                 		LDS R16, $1000
000054 d08c                      		RCALL key_map
000055 9300 2100                 		STS LCD_OUT, R16
                                 
000057 e100                      		LDI R16, $10
000058 d051                      		RCALL delay_1_52ms
000059 9300 2000                 		STS LCD_CONTROL, R16
00005b 9518                      		RETI
                                 
00005c 6854
00005d 7369
00005e 6920
00005f 2073
000060 2061
000061 6574
000062 7473                      LCD_TEST:	.db	"This is a test"
000063 4441
000064 3a43
000065 0020                      ADC_TEST:	.db	"ADC: ",$00
000066 614c
000067 7473
000068 6b20
000069 7965
00006a 203a                      KEY_TEST:	.db "Last key: " 
00006b 7854
00006c 203a
00006d 202a
00006e 7852
00006f 203a
000070 002a                      TXR_TEST:	.db	"Tx: * Rx: *", $00
                                 
                                 ; External Files
                                 .include "General.inc"
                                 
                                 ; File name: General.inc
                                 ; Descripton:	Subroutines that are used in main.asm
                                 ;				but don't fall under a specific module
                                 ;
                                 
                                 ;
                                 ; Purpose: To convet the hex value in a register to the asscii value
                                 ; split across two registers
                                 ; Registers Used: R16(Input), R15, R17:R16(Output)     msb:lsb
                                 ;
                                 hex2asc:
000071 24ee                      		CLR R14
000072 2ef0                      		MOV R15, R16
000073 9506                      		LSR R16
000074 9506                      		LSR R16
000075 9506                      		LSR R16
000076 9506                      		LSR R16
                                 asc_chk:
000077 300a                      		CPI R16, $0A	; Check if the HEX value is a letter
000078 f020                      		BRLO number
                                 
                                 letter:
000079 5009                      		SUBI R16, $09
00007a e420                      		LDI R18, $40
00007b 0f02                      		ADD R16, R18
00007c c007                      		RJMP asc_done
                                 number:
00007d e320                      		LDI R18, $30
00007e 0f02                      		ADD R16, R18
00007f c004                      		RJMP asc_done
                                 
                                 next_byte:
000080 2f10                      		MOV R17, R16
000081 2d0f                      		MOV R16, R15
000082 700f                      		ANDI R16, $0F
000083 cff3                      		RJMP asc_chk
                                 
                                 asc_done:
000084 94e3                      		INC R14
000085 e022                      		LDI R18, 2
000086 16e2                      		CP R14, R18
000087 f7c1                      		BRNE next_byte
000088 9508                      		RET
                                 .include "Delays.inc"
                                 
                                 ;Delay Subroutines
                                 ;
                                 delay_5ms:
000089 93af                      PUSH R26
00008a 93bf                      PUSH R27
00008b eea8                      	LDI R26, $E8
00008c e0b4                      	LDI R27, $04
                                 timer5:
00008d 0000                      	NOP
00008e 9711                      	SBIW X, 1
00008f f7e9                      	BRNE timer5
000090 91bf                      POP R27
000091 91af                      POP R26
000092 9508                      	RET
                                 
                                 delay_1ms:
000093 938f                      	push r24
000094 ec88                      	LDI R24, $C8
                                 timer4:
000095 0000                      	NOP
000096 0000                      	NOP
000097 958a                      	DEC R24
000098 f7e1                      	BRNE timer4
000099 918f                      	pop r24
00009a 9508                      	RET
                                 
                                 delay_2s:
00009b 93af                      PUSH R26
00009c 93bf                      PUSH R27
00009d 938f                      PUSH R24
00009e e8a0                      	ldi R26, $80
00009f e1ba                      	ldi R27, $1A
0000a0 e086                      	ldi R24, $06
                                 timer3:
0000a1 0000                      	NOP
0000a2 9711                      	SBIW X, 1
0000a3 f7e9                      	brne timer3
0000a4 958a                      	dec R24
0000a5 f7d9                      	brne timer3
0000a6 918f                      POP R24
0000a7 91bf                      POP R27
0000a8 91af                      POP R26
0000a9 9508                      	ret
                                 
                                 delay_1_52ms:
0000aa 93af                      PUSH R26
0000ab 93bf                      PUSH R27
0000ac e3a0                      	ldi r26,$30
0000ad e0b1                      	ldi r27,$01
                                 timer2:
0000ae 0000                      	NOP
0000af 9711                      	SBIW X, 1
0000b0 f7e9                      	brne timer2
0000b1 91bf                      POP R27
0000b2 91af                      POP R26
0000b3 9508                      	ret
                                 
                                 delay_37us:
0000b4 938f                      push r24
0000b5 e089                      	ldi R24, 9
                                 timer1:
0000b6 0000                      	NOP
0000b7 958a                      	dec R24
0000b8 f7e9                      	brne timer1
0000b9 918f                      	pop r24
0000ba 9508                      	ret
                                 
                                 delay_40ms:
0000bb 93af                      PUSH R26
0000bc 93bf                      PUSH R27
0000bd e4a0                      	ldi r26,$40
0000be e1bf                      	ldi r27,$1F
                                 timer0:
0000bf 0000                      	NOP
0000c0 9711                      	SBIW X, 1
0000c1 f7e9                      	brne timer0
0000c2 91bf                      POP R27
0000c3 91af                      POP R26
0000c4 9508                      	ret
                                 .include "LCD.inc"
                                 
                                 ; File name: LCD.inc
                                 ; Description: Subroutines used to control the LCD display
                                 ;
                                 
                                 .EQU LCD_CONTROL = $2000
                                 .EQU LCD_OUT = $2100
                                 
                                 ;
                                 ; Subroutine to init the LCD display for use
                                 ;
                                 init_LCD:
0000c5 dff5                      	rcall delay_40ms
                                 
0000c6 e308                      	ldi R16, $38
0000c7 9300 2000                 	STS LCD_CONTROL, R16	; Function Set
0000c9 dfea                      	rcall delay_37us
                                 
0000ca 9300 2000                 	STS LCD_CONTROL, R16	; Function Set
0000cc dfe7                      	rcall delay_37us
                                 
0000cd e00c                      	ldi R16, $0C
0000ce 9300 2000                 	STS LCD_CONTROL, R16	; Turn on the Display
                                 LCD_reset:			; Label used to reset the display when needed
                                 					; without fully reinitializing
0000d0 dfe3                      	rcall delay_37us
                                 
0000d1 e001                      	ldi R16, $01
0000d2 9300 2000                 	STS LCD_CONTROL, R16	; Clear the Display
0000d4 dfd5                      	rcall delay_1_52ms
                                 
0000d5 e006                      	ldi R16, $06
0000d6 9300 2000                 	STS LCD_CONTROL, R16	; Entry mode set
0000d8 dfdb                      	rcall delay_37us
0000d9 9508                      	ret
                                 
                                 ;
                                 ; Subroutine to output ASCII characters to the
                                 ; most recent spot available on the LCD
                                 ;
                                 LCD_text:
0000da dfb8                      	rcall delay_1ms
0000db 9105                      	lpm   R16, Z+      ;get char from memory
0000dc 9300 2100                 	STS	LCD_OUT, R16
0000de 959a                      	DEC R25     
0000df f7d1                      	brne  LCD_text
                                 .include "Keypad.inc"
0000e0 9508                      
                                 ; File name: Keypad.inc
                                 ; Descripton: Subroutines to aide in using a keypad
                                 ;
                                 
                                 ;
                                 ; Purpose: To translate the input values from a keypad into
                                 ; the ASCII values they represent
                                 ; Registers used: R16(Input/Output), R15
                                 ;
                                 key_map:
0000e1 2ef0                      		MOV  R15, R16
0000e2 fef3                      		SBRS R15, 3
0000e3 c009                      		RJMP key_map_0
0000e4 fef2                      		SBRS R15, 2
0000e5 c010                      		RJMP key_map_2
                                 
0000e6 fcf0                      		SBRC R15, 0
0000e7 e300                      		LDI  R16, '0'
0000e8 fef0                      		SBRS R15, 0
0000e9 e20a                      		LDI  R16, '*'
0000ea fcf1                      		SBRC R15, 1
0000eb e203                      		LDI  R16, '#'
0000ec c00c                      		RJMP keymap_end
                                 
                                 key_map_0:
0000ed fcf2                      		SBRC R15, 2
0000ee c004                      		RJMP key_map_1
                                 
0000ef 9503                      		INC  R16
0000f0 e410                      		LDI  R17, $40
0000f1 0f01                      		ADD  R16, R17
0000f2 c006                      		RJMP keymap_end
                                 
                                 key_map_1:
0000f3 e410                      		LDI R17, $40
0000f4 0f01                      		ADD R16, R17
0000f5 c003                      		RJMP keymap_end
                                 
                                 key_map_2:
0000f6 950a                      		DEC  R16
0000f7 e410                      		LDI  R17, $40
0000f8 0f01                      		ADD  R16, R17
                                 keymap_end:
0000f9 9508                      		RET
                                 .include "Serial.inc"
                                 
                                 ; File name: Serial.inc
                                 ; Descripton:	Subroutine to aide in serial communication
                                 ;				with a raspberry pi
                                 ;
                                 
                                 ;
                                 ; Purpose: To initialize the serial communication registers
                                 ; according to the values chosen by changing the values of 
                                 ; BAUD, UCTLB and FRAME at the top of the code.
                                 ; Registers Used: R16
                                 ;
                                 init_uart:                 
0000fa e000                      		LDI r16, 0
0000fb bd00                      		OUT UBRRH, r16
0000fc e109                      		LDI r16, BAUD
0000fd b909                      		OUT UBRRL, R16		; configures the bit rate
0000fe e108                      		LDI R16, UCTLB
0000ff b90a                      		OUT	UCSRB, R16		; configures the Tx/Rx channel
000100 e806                      		LDI R16, FRAME
000101 bd00                      		OUT UCSRC, r16		; configures frame elements
000102 9508                      		RET
                                 
                                 simple_msg:
000103 e001                      		LDI R16, 1
000104 d014                      		RCALL putch
000105 d00e                      		RCALL getch
                                 ready:
000106 2f03                      		MOV R16, R19
000107 d011                      		RCALL putch
000108 d00b                      		RCALL getch
000109 2f03                      		MOV R16, R19
00010a 9508                      		RET
                                 ;
                                 ; Purpose: To transmit messages consisting of many bytes 
                                 ; to the Raspberry Pi through a serial connection
                                 ; Registers Used: R16, R17(Input), R30(Input), R31(Input)
                                 ;
                                 msg_send:
00010b 2f01                      		MOV R16, R17
00010c d00c                      		RCALL putch
00010d d006                      		RCALL getch
                                 rdy:
00010e 9105                      		LPM R16, Z+
00010f d009                      		RCALL putch
000110 d003                      		RCALL getch
000111 951a                      		DEC R17
000112 f7d9                      		BRNE rdy
000113 9508                      		RET
                                 
                                 ;
                                 ; Purpose: To the read a ingle Byte of data from the serial
                                 ; connection
                                 ; Registers Used: R16(Output)
                                 ;
                                 getch:
000114 b10b                      		IN R16, UCSRA
000115 7800                      		ANDI R16, $80
000116 f3e9                      		BREQ getch
000117 b10c                      		IN R16, UDR
000118 9508                      		RET
                                 ;
                                 ; Purpose to transmit a single byte of data through serial
                                 ; and then wait for the the process to complete
                                 ; Registers Used: R16(Input)
                                 ;
                                 putch:
000119 b90c                      		OUT UDR, R16
                                 wait0:
00011a b10b                      		IN R16, UCSRA
00011b 3200                      		CPI R16, $20
00011c f3e9                      		BREQ wait0
00011d 9508                      		RET
                                 
                                 ;
                                 ; Purpose:	A Subroutine to test communiction between
                                 ;			microcontroller and the Raspberry Pi
                                 ;
                                 TxRx_:
00011e e09b                      		LDI R25, 11
00011f ede6                      		LDI R30, LOW(TXR_TEST<<1)
000120 e0f0                      		LDI R31, HIGH(TXR_TEST<<1)
000121 dfb8                      		RCALL LCD_text
                                 
                                 Rx:
000122 e100                      		LDI R16, $10
000123 df86                      		RCALL delay_1_52ms
000124 9300 2000                 		STS LCD_CONTROL, R16
000126 dfed                      		RCALL getch
000127 9300 2100                 		STS LCD_OUT, R16
000129 e047                      		LDI R20, 7
                                 
                                 Tx:
00012a e100                      		LDI R16, $10
00012b df7e                      		RCALL delay_1_52ms
00012c 9300 2000                 		STS LCD_CONTROL, R16
00012e 954a                      		DEC R20
00012f f7d1                      		BRNE Tx
                                 
000130 dfd2                      		RCALL simple_msg
000131 9300 2100                 		STS LCD_OUT, R16
                                 
000133 9533                      		INC R19
000134 e046                      		LDI R20, 6
000135 e104                      		LDI R16, $14
                                 move_back:
000136 df73                      		RCALL delay_1_52ms
000137 9300 2000                 		STS LCD_CONTROL, R16
000139 954a                      		DEC R20
00013a f7d9                      		BRNE move_back
00013b cfe6                      		RJMP Rx
00013c 9508                      		RET


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8515" register use summary:
x  :   4 y  :   0 z  :   2 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   3 r15:   9 r16:  80 r17:  10 r18:   6 r19:   4 r20:   4 
r21:   0 r22:   0 r23:   0 r24:  12 r25:   5 r26:  12 r27:  12 r28:   0 
r29:   0 r30:   4 r31:   4 
Registers used: 15 out of 35 (42.9%)

"ATmega8515" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   5 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 breq  :   2 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 brne  :  12 
brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 
cli   :   0 cln   :   0 clr   :   1 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   1 cpc   :   0 cpi   :   2 cpse  :   0 
dec   :   8 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   3 inc   :   3 ld    :   0 ldd   :   0 ldi   :  55 
lds   :   2 lpm   :   2 lsl   :   0 lsr   :   4 mov   :   7 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   7 or    :   0 
ori   :   0 out   :   9 pop   :  11 push  :  11 rcall :  35 ret   :  18 
reti  :   1 rjmp  :  14 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   0 sbrc  :   3 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   0 std   :   0 sts   :  19 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 30 out of 110 (27.3%)

"ATmega8515" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00027a    536     42    578    8192   7.1%
[.dseg] 0x000060 0x00010c      0     12     12     512   2.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
