
AVRASM ver. 2.2.7  C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm Sun May 05 20:21:54 2019

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m8515def.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(25): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m8515def.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(164): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\General.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(165): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\Keypad.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(166): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\LCD.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(167): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\Delays.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(168): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\Serial.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m8515def.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(25): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m8515def.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(164): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\General.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(165): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\Keypad.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(166): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\LCD.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(167): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\Delays.inc'
C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\main.asm(168): Including file 'C:\Users\William\Desktop\PROJECT - FINAL\Assembly Code\FINAL CODE\Serial.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8515.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8515def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8515
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8515
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8515DEF_INC_
                                 #define _M8515DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8515
                                 #pragma AVRPART ADMIN PART_NAME ATmega8515
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x06
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	EMCUCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x24
                                 .equ	ICR1H	= 0x25
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	PORTE	= 0x07
                                 .equ	DDRE	= 0x06
                                 .equ	PINE	= 0x05
                                 .equ	OSCCAL	= 0x04
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	AINBG	= ACBG	; For compatibility
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size Bit 2
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size Bit 0
                                 .equ	UCSZ1	= 2	; Character Size Bit 1
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 ; UBRRH - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 ;.equ	URSEL	= 7	; Register Select
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; EMCUCR - Extended MCU Control Register
                                 .equ	ISC2	= 0	; Interrupt Sense Control 2
                                 .equ	SRW11	= 1	; Wait State Select Bits for Upper Sector, bit 1
                                 .equ	SRW00	= 2	; Wait State Select Bits for Lower Sector, bit 0
                                 .equ	SRW01	= 3	; Wait State Select Bits for Lower Sector, bit 1
                                 .equ	SRL0	= 4	; Wait State Selector Limit bit 0
                                 .equ	SRL1	= 5	; Wait State Selector Limit bit 1
                                 .equ	SRL2	= 6	; Wait State Selector Limit bit 2
                                 .equ	SM0	= 7	; Sleep Mode Select Bit 0
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM1	= 4	; Sleep Mode Select Bit 1
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; Wait State Select Bits for Upper Sector, bit 0
                                 .equ	SRE	= 7	; External SRAM/XMEM Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	SM2	= 5	; Sleep Mode Select Bit 2
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer / Counter 1 and Timer / Counter 0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	XMM0	= 3	; External Memory High Mask Bit 0
                                 .equ	XMM1	= 4	; External Memory High Mask Bit 1
                                 .equ	XMM2	= 5	; External Memory High Mask Bit 2
                                 .equ	XMBK	= 6	; External Memory Bus Keeper Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter 0 Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter 0 Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Timer/Counter 0 Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	OCIE0	= 0	; Timer/Counter0 Output Compare Match Interrupt register
                                 .equ	TOIE0	= 1	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	OCF0	= 0	; Output Compare Flag 0
                                 .equ	TOV0	= 1	; Timer/Counter0 Overflow Flag
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TICIE1	= 3	; Timer/Counter1 Input Capture Interrupt Enable
                                 .equ	OCIE1B	= 5	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 6	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TOIE1	= 7	; Timer/Counter1 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	ICF1	= 3	; Input Capture Flag 1
                                 .equ	OCF1B	= 5	; Output Compare Flag 1B
                                 .equ	OCF1A	= 6	; Output Compare Flag 1A
                                 .equ	TOV1	= 7	; Timer/Counter1 Overflow Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 3	; Force Output Compare for Channel A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select1 bit 0
                                 .equ	CS11	= 1	; Clock Select1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Pulse Width Modulator Select Bit 2
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Pulse Width Modulator Select Bit 3
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Port E Data Register
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 
                                 ; DDRE - Port E Data Direction Register
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 
                                 ; PINE - Port E Input Pins
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WDTON	= 6	; Watchdog timer always on
                                 .equ	S8515C	= 7	; AT90S4414/8515 compabillity mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 512
                                 .equ	RAMEND	= 0x025f
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 512
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	ICP1addr	= 0x0003	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0004	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0005	; Timer/Counter1 Compare MatchB
                                 .equ	OVF1addr	= 0x0006	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0007	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0008	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0009	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000a	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000b	; USART, Tx Complete
                                 .equ	ACIaddr	= 0x000c	; Analog Comparator
                                 .equ	INT2addr	= 0x000d	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x000e	; Timer 0 Compare Match
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	SPMRaddr	= 0x0010	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 17	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8515DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; main.asm
                                 ;
                                 ; Author : William Dorey
                                 ;
                                 
                                 ;
                                 ; This is the main Assembly code file for 
                                 ; the SPDS. This unit controls the locking
                                 ; mechanism of the unit as well as the
                                 ; monitoring of the weight for contents
                                 ; placed in the unit. Information is
                                 ; communicated to a Raspberry Pi server
                                 ; using UART serial transmission.
                                 ;
                                 
                                 ; Data 
                                 .dseg
000060                           pass_code:	.byte 6
                                 .ORG $100
000100                           pass_atmp:	.byte 6
                                 
                                 ; Code
                                 .cseg
                                 .INCLUDE "m8515def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8515.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8515def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8515
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8515
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8515DEF_INC_
                                 #endif  /* _M8515DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
000000 c01d                      reset:	RJMP init
000001 c046                      		RJMP isr0
                                 		.org $1E
                                 
                                 ; Main initialization sequence start
                                 init:
                                 		; Stack pointer to allow for subroutines
00001e e50f                      		LDI R16, LOW(RAMEND)
00001f bf0d                      		OUT SPL, R16
000020 e002                      		LDI R16, HIGH(RAMEND)
000021 bf0e                      		OUT SPH, R16
                                 
                                 		; Selecting interupts to enable
000022 e400                      		LDI R16, (1<<INT0)
000023 bf0b                      		OUT GICR, R16
                                 
                                 		; Bus and Interrupt initialization
000024 e802                      		LDI R16, $82
000025 bf05                      		OUT MCUCR, R16
                                 
                                 		; Sets Solenoid and kickstarts ADC
000026 ef0f                      		LDI R16, $FF
000027 bb07                      		OUT DDRB, R16
000028 9300 1000                 		STS $1000, R16
00002a e000                      		LDI R16, $00
00002b bb08                      		OUT PORTB, R16
                                 
                                 		; LCD and Serial communications
00002c d15c                      		RCALL Serial_init
00002d d108                      		RCALL LCD_init
                                 
                                 
                                 		; Display banner and Checksum
00002e e099                      		LDI R25, 9
00002f ede6                      		LDI R30, LOW(BANR<<1)
000030 e0f0                      		LDI R31, HIGH(BANR<<1)
000031 d119                      		RCALL LCD_print
000032 ec00                      		LDI R16, $C0
000033 9300 2000                 		STS LCD_CON, R16
000035 e099                      		LDI R25, 9
000036 d114                      		RCALL LCD_print
                                 
000037 d0b1                      		RCALL default_pass
                                 			
000038 d057                      		RCALL Gen_Check
000039 d13f                      		RCALL delay_2s
00003a d106                      		RCALL LCD_rst
                                 ; End of main intialization sequence
                                 		; Enable interupt signal
00003b 9478                      		SEI
                                 
00003c e190                      		LDI R25, 16
00003d eee8                      		LDI R30, LOW(PROMPT<<1)
00003e e0f0                      		LDI R31, HIGH(PROMPT<<1)
00003f d10b                      		RCALL LCD_print
                                 
                                 wait:	; Wait for a signal from server
                                 		; to either set a new passcode
                                 		; or to obtain a value from the ADC
000040 d151                      		RCALL Serial_get
                                 
000041 3527                      		CPI R18, 'W'
000042 f409                      		BRNE skip0
000043 d08f                      		RCALL Gen_ADC
                                 
                                 skip0:
000044 3523                      		CPI R18, 'S'
000045 f409                      		BRNE fini
000046 d0ac                      		RCALL Gen_set_pass
                                 
                                 fini:	; Return to waiting for a signal
                                 		; from the Rapsberry Pi server
000047 cff8                      		RJMP wait
                                 
                                 ;
                                 ; Interupt subroutine that gegins when a value
                                 ; is made available by the keypad module
                                 ;
                                 isr0:
000048 930f                      		PUSH R16
000049 9100 1000                 		LDS R16, $1000
00004b d0d1                      		RCALL Key_map
                                 		;Check if there is an active attempt
00004c 3061                      		CPI R22, $01
00004d f091                      		BREQ attempt
                                 
                                 		; The start of a new Passcode Attempt
00004e 320a                      		CPI  R16, '*'
00004f f4b1                      		BRNE isr0_end
000050 d0f0                      		RCALL LCD_rst
000051 e09f                      		LDI R25, 15
000052 efe8                      		LDI R30, LOW(PASS<<1)
000053 e0f0                      		LDI R31, HIGH(PASS<<1)
000054 d0f6                      		RCALL LCD_print
000055 ec00                      		LDI R16, $C0
000056 9300 2000                 		STS LCD_CON, R16
                                 		
000058 d104                      		RCALL delay_1_52ms
000059 9104                      		LPM R16, Z
00005a 9300 2100                 		STS LCD_OUT, R16 
                                 		; Load the first location of the
                                 		; passcode attempt data
00005c e0a0                      		LDI R26, LOW(pass_atmp)
00005d e0b1                      		LDI R27, HIGH(pass_atmp)
00005e e061                      		LDI R22, $01
00005f c006                      		RJMP isr0_end
                                 
                                 attempt:	; continue an active passcode
                                 			; attempt unless the character
                                 			; is a '#', in which case, end
                                 			; the attempt
000060 3203                      		CPI R16, '#'
000061 f031                      		BREQ stop
000062 930d                      		ST X+, R16
000063 9300 2100                 		STS LCD_OUT, R16
000065 9573                      		INC R23
                                 
                                 isr0_end:		
000066 910f                      		POP R16
000067 9518                      		RETI
                                 
                                 
                                 ;End a Passcode Attempt
                                 stop:
000068 2766                      		CLR R22
000069 d093                      		RCALL Gen_code_check
00006a cffb                      		RJMP isr0_end
                                 
                                 
                                 ; Patterns
00006b 5053
00006c 5344
00006d 5620
00006e 2e32
00006f 4330
000070 6568
000071 6b63
000072 7573
000073 206d                      BANR:	.db	"SPDS V2.0Checksum "
000074 7250
000075 7365
000076 2073
000077 202a
000078 6f74
000079 4220
00007a 6765
00007b 6e69                      PROMPT:	.db	"Press * to Begin"
00007c 6e45
00007d 6574
00007e 2072
00007f 6150
000080 7373
000081 6f63
000082 6564
000083 3e3a                      PASS:	.db	"Enter Passcode:>"
000084 4f47
000085 444f
000086 5520
000087 6c6e
000088 636f
000089 216b                      GOOD:	.db	"GOOD Unlock!"
00008a 4142
00008b 2044
00008c 7441
00008d 6574
00008e 706d
00008f 2174                      BAD:	.db	"BAD Attempt!"
                                 
                                 ; List of available Subroutines and their respective files
                                 .include	"General.inc"	; Gen_Check,hex2asc,ADC,unlock,code_check
                                 
                                 
                                 ;
                                 ; Various routines for miscelaneous uses
                                 ; that are not for any specific module of
                                 ; the embedded unit
                                 ;
                                 
                                 ;
                                 ; Subroutine to generate a Checksum of the
                                 ; microcontroller's cseg and then display
                                 ; it on the LCD
                                 ;
                                 Gen_Check:
000090 e4e6                      		LDI R30, LOW(CHKSUM<<1)
000091 e0f3                      		LDI R31, HIGH(CHKSUM<<1)
000092 2eee                      		MOV R14, R30
000093 2eff                      		MOV R15, R31
000094 27ee                      		CLR R30
000095 27ff                      		CLR R31
000096 2722                      		CLR R18
000097 2733                      		CLR R19
000098 2744                      		CLR R20
000099 2755                      		CLR R21
                                 addvalues:
00009a 9105                      		LPM R16, Z+
00009b 0f20                      		ADD R18, R16
00009c 1f35                      		ADC R19, R21
00009d 1f45                      		ADC R20, R21
00009e 15ee                      		CP  R30, R14
00009f f7d1                      		BRNE addvalues
0000a0 15ff                      		CP  R31, R15
0000a1 f7c1                      		BRNE addvalues
                                 ChkSum_disp:
0000a2 2f04                      		MOV R16, R20
0000a3 d017                      		RCALL Gen_hex2asc
0000a4 d0b3                      		RCALL delay_1ms
0000a5 9300 2100                 		STS LCD_OUT, R16
0000a7 d0b0                      		RCALL delay_1ms
0000a8 9310 2100                 		STS LCD_OUT, R17
0000aa 2f03                      		MOV R16, R19
0000ab d00f                      		RCALL Gen_hex2asc
0000ac d0ab                      		RCALL delay_1ms
0000ad 9300 2100                 		STS LCD_OUT, R16
0000af d0a8                      		RCALL delay_1ms
0000b0 9310 2100                 		STS LCD_OUT, R17
0000b2 2f02                      		MOV R16, R18
0000b3 d007                      		RCALL Gen_hex2asc
0000b4 d0a3                      		RCALL delay_1ms
0000b5 9300 2100                 		STS LCD_OUT, R16
0000b7 d0a0                      		RCALL delay_1ms
0000b8 9310 2100                 		STS LCD_OUT, R17
0000ba 9508                      		RET
                                 
                                 ;
                                 ; This routine converts the value of R16
                                 ; into ASCII text for either transmission
                                 ; using USART or display on the LCD
                                 ;
                                 Gen_hex2asc:
0000bb 24ee                      		CLR R14
0000bc 2ef0                      		MOV R15, R16
0000bd 9506                      		LSR R16
0000be 9506                      		LSR R16
0000bf 9506                      		LSR R16
0000c0 9506                      		LSR R16
                                 asc_chk:
0000c1 300a                      		CPI R16, $0A
0000c2 f020                      		BRLO number
                                 letter:
0000c3 5009                      		SUBI R16, $09
0000c4 e420                      		LDI R18, $40
0000c5 0f02                      		ADD R16, R18
0000c6 c007                      		RJMP asc_done
                                 number:
0000c7 e320                      		LDI R18, $30
0000c8 0f02                      		ADD R16, R18
0000c9 c004                      		RJMP asc_done
                                 next_byte:
0000ca 2f10                      		MOV R17, R16
0000cb 2d0f                      		MOV R16, R15
0000cc 700f                      		ANDI R16, $0F
0000cd cff3                      		RJMP asc_chk
                                 asc_done:
0000ce 94e3                      		INC R14
0000cf e022                      		LDI R18, 2
0000d0 16e2                      		CP R14, R18
0000d1 f7c1                      		BRNE next_byte
0000d2 9508                      		RET
                                 
                                 ;
                                 ; Subroutine to pull a value from the ADC
                                 ; and then send the value through USART to
                                 ; the Raspberry Pi server
                                 ;
                                 Gen_ADC:
0000d3 d0c8                      		RCALL simple_msg
0000d4 9100 7000                 		LDS R16, $7000
0000d6 dfe4                      		RCALL Gen_hex2asc
0000d7 d0ba                      		RCALL Serial_get
0000d8 2f21                      		MOV R18, R17
0000d9 d0bd                      		RCALL Serial_send
0000da 0000                      		NOP
0000db d0b6                      		RCALL Serial_get
0000dc 2f20                      		MOV R18, R16
0000dd d0b9                      		RCALL Serial_send
0000de 9508                      		RET
                                 
                                 ;
                                 ; Subroutine to activate the solonoid, unlocking
                                 ; the SPDS for 5 seconds
                                 ;
                                 Gen_unlock:
0000df 930f                      		PUSH R16
0000e0 931f                      		PUSH R17
0000e1 e001                      		LDI R16, $01
0000e2 bb08                      		OUT PORTB, R16
0000e3 d08e                      		RCALL delay_5s
0000e4 2700                      		CLR R16
0000e5 bb08                      		OUT PORTB, R16
0000e6 911f                      		POP R17
0000e7 910f                      		POP R16
0000e8 9508                      		RET
                                 
                                 ;
                                 ; Subroutine to set the default passcode of
                                 ; '******' upon startup after powerfailure
                                 ;
                                 default_pass:
0000e9 e20a                      		LDI R16, '*'
0000ea e0d0                      		LDI R29, HIGH(pass_code)
0000eb e6c0                      		LDI R28, LOW(pass_code)
0000ec 9309                      		ST  Y+, R16
0000ed 9309                      		ST  Y+, R16
0000ee 9309                      		ST  Y+, R16
0000ef 9309                      		ST  Y+, R16
0000f0 9309                      		ST  Y+, R16
0000f1 9309                      		ST  Y+, R16
0000f2 9508                      		RET
                                 ;
                                 ; Subroutine to set a new passcode by retrieving
                                 ; the values from the Raspberry Pi server and
                                 ; storing them in the data segment
                                 ;
                                 Gen_set_pass:
0000f3 d0a8                      		RCALL simple_msg
0000f4 e0d0                      		LDI R29, HIGH(pass_code)
0000f5 e6c0                      		LDI R28, LOW(pass_code)
0000f6 e006                      		LDI R16, 6
                                 Gen_set_pass_loop:
0000f7 d09a                      		RCALL Serial_get
0000f8 9329                      		ST Y+, R18
0000f9 d09d                      		RCALL Serial_send
0000fa 950a                      		DEC R16
0000fb f7d9                      		BRNE Gen_set_pass_loop
0000fc 9508                      		RET
                                 
                                 ;
                                 ; Subroutine to check an attempted password
                                 ; against the one stored in the data segment
                                 ;
                                 Gen_code_check:
0000fd 3076                      		CPI R23, 6
0000fe f489                      		BRNE bad_attempt
                                 
0000ff e0d0                      		LDI R29, HIGH(pass_code)
000100 e6c0                      		LDI R28, LOW(pass_code)
000101 e0b1                      		LDI R27, HIGH(pass_atmp)
000102 e0a0                      		LDI R26, LOW(pass_atmp)
                                 
                                 Gen_code_check_loop:
000103 910d                      		LD R16, X+
000104 9119                      		LD R17, Y+
000105 1710                      		CP  R17, R16
000106 f449                      		BRNE bad_attempt
                                 
000107 957a                      		DEC R23
000108 f7d1                      		BRNE Gen_code_check_loop
                                 
                                 good_attmept:
000109 d037                      		RCALL LCD_rst
00010a e09c                      		LDI R25, 12
00010b e0e8                      		LDI R30, LOW(GOOD<<1)
00010c e0f1                      		LDI R31, HIGH(GOOD<<1)
00010d d03d                      		RCALL LCD_print
00010e dfd0                      		RCALL Gen_unlock
00010f c006                      		RJMP Gen_code_check_end	
                                 
                                 bad_attempt:
000110 d030                      		RCALL LCD_rst
000111 e09c                      		LDI R25, 12
000112 e1e4                      		LDI R30, LOW(BAD<<1)
000113 e0f1                      		LDI R31, HIGH(BAD<<1)
000114 d036                      		RCALL LCD_print
000115 d063                      		RCALL delay_2s
                                 
                                 Gen_code_check_end:
000116 d02a                      		RCALL LCD_rst
000117 e190                      		LDI R25, 16
000118 eee8                      		LDI R30, LOW(PROMPT<<1)
000119 e0f0                      		LDI R31, HIGH(PROMPT<<1)
00011a d030                      		RCALL LCD_print
00011b 2777                      		CLR R23
00011c 9508                      		RET
                                 
                                 .include	"Keypad.inc"	; Key_map
                                 
                                 
                                 ;
                                 ; This subroutine translates the signal from
                                 ; the keypad controller IC into the ASCII
                                 ; value that was selected on the keypad
                                 ;
                                 Key_map:
00011d 2ef0                      		MOV  R15, R16
00011e fef3                      		SBRS R15, 3
00011f c009                      		RJMP Key_map0
000120 fef2                      		SBRS R15, 2
000121 c010                      		RJMP Key_map2
                                 
000122 fcf0                      		SBRC R15, 0
000123 e300                      		LDI  R16, '0'
000124 fef0                      		SBRS R15, 0
000125 e20a                      		LDI  R16, '*'
000126 fcf1                      		SBRC R15, 1
000127 e203                      		LDI  R16, '#'
000128 c00c                      		RJMP Key_map_end
                                 
                                 Key_map0:
000129 fcf2                      		SBRC R15, 2
00012a c004                      		RJMP Key_map1
                                 
00012b 9503                      		INC  R16
00012c e410                      		LDI  R17, $40
00012d 0f01                      		ADD  R16, R17
00012e c006                      		RJMP Key_map_end
                                 
                                 Key_map1:
00012f e410                      		LDI R17, $40
000130 0f01                      		ADD R16, R17
000131 c003                      		RJMP Key_map_end
                                 
                                 Key_map2:
000132 950a                      		DEC  R16
000133 e410                      		LDI  R17, $40
000134 0f01                      		ADD  R16, R17
                                 Key_map_end:
000135 9508                      		RET
                                 
                                 .include	"LCD.inc"		; LCD_init,rst,print
                                 
                                 ;
                                 ; Subroutines for controling an LCD unit
                                 ; using the Atmega8515's data bus signals
                                 ;
                                 
                                 ; LCD addresses for defining control and
                                 ; and output values
                                 
                                 .EQU LCD_CON = $2000
                                 .EQU LCD_OUT = $2100
                                 
                                 
                                 ;
                                 ; Subroutine to initialize the LCD for basic
                                 ; display purposes
                                 ;
                                 LCD_init:
000136 d030                      		RCALL delay_40ms
                                 
                                 		; Function set
000137 e308                      		LDI R16, $38
000138 9300 2000                 		STS LCD_CON, R16
00013a d018                      		RCALL delay_37us
00013b 9300 2000                 		STS LCD_CON, R16
00013d d015                      		RCALL delay_37us
                                 
                                 		; Turn on the display
00013e e00c                      		LDI R16, $0C
00013f 9300 2000                 		STS LCD_CON, R16
                                 
                                 ;
                                 ; Nested subroutine to reset the LCD in order
                                 ; refresh the display
                                 ;
                                 LCD_rst:
000141 d011                      		RCALL delay_37us
                                 
                                 		; Clear the display
000142 e001                      		LDI R16, $01
000143 9300 2000                 		STS LCD_CON, R16
000145 d017                      		RCALL delay_1_52ms
                                 
                                 		; Setting the entry mode
000146 e006                      		LDI R16, $06
000147 9300 2000                 		STS LCD_CON, R16
000149 d009                      		RCALL delay_37us
00014a 9508                      		RET
                                 
                                 
                                 ;
                                 ; Subroutine to print a message on the LCD
                                 ; using values obtained from a preloaded
                                 ; pattern
                                 ;
                                 LCD_print:
00014b d00c                      		RCALL delay_1ms
00014c 9105                      		LPM R16, Z+
00014d 9300 2100                 		STS LCD_OUT, R16
00014f 959a                      		DEC R25
000150 f7d1                      		BRNE LCD_print
000151 d006                      		RCALL delay_1ms
000152 9508                      		RET
                                 
                                 .include	"Delays.inc"	; delay_37us,1ms,1_52ms,5ms,40ms,2s,5s
                                 
                                 
                                 ;
                                 ; The subroutines each load their required
                                 ; loop counts and then jump to the loop
                                 ;
                                 delay_37us:
000153 93bf                      		PUSH R27
000154 93af                      		PUSH R26
000155 e0a6                      		LDI R26, $06
000156 e0b0                      		LDI R27, $00
000157 c014                      		RJMP delay_loop
                                 
                                 delay_1ms:
000158 93bf                      		PUSH R27
000159 93af                      		PUSH R26
00015a eca8                      		LDI R26, $C8
00015b e0b0                      		LDI R27, $00
00015c c00f                      		RJMP delay_loop
                                 
                                 delay_1_52ms:
00015d 93bf                      		PUSH R27
00015e 93af                      		PUSH R26
00015f e3a0                      		LDI R26, $30
000160 e0b1                      		LDI R27, $01
000161 c00a                      		RJMP delay_loop
                                 
                                 delay_5ms:
000162 93bf                      		PUSH R27
000163 93af                      		PUSH R26
000164 e6af                      		LDI R26, $6F
000165 e0b2                      		LDI R27, $02
000166 c005                      		RJMP delay_loop
                                 
                                 delay_40ms:
000167 93bf                      		PUSH R27
000168 93af                      		PUSH R26
000169 e4a0                      		LDI R26, $40
00016a e1bf                      		LDI R27, $1F
00016b c000                      		RJMP delay_loop
                                 
                                 delay_loop:
00016c 9711                      		SBIW X, 1
00016d 0000                      		NOP
00016e f7e9                      		BRNE delay_loop
00016f 91af                      		POP R26
000170 91bf                      		POP R27
000171 9508                      		RET
                                 
                                 ; Longer dalays that require an additional register
                                 ; for loop counts
                                 delay_5s:
000172 93cf                      		PUSH R28
000173 93bf                      		PUSH R27
000174 93af                      		PUSH R26
000175 e4a0                      		LDI  R26, $40
000176 e4b2                      		LDI  R27, $42
000177 e1c0                      		LDI  R28, $10
000178 c007                      		RJMP delay_extended_loop
                                 
                                 delay_2s:
000179 93cf                      		PUSH R28
00017a 93bf                      		PUSH R27
00017b 93af                      		PUSH R26
00017c e8a0                      		LDI  R26, $80
00017d e1ba                      		LDI  R27, $1A
00017e e0c7                      		LDI  R28, $07
00017f c000                      		RJMP delay_extended_loop
                                 
                                 delay_extended_loop:
000180 9711                      		SBIW X, 1
000181 0000                      		NOP
000182 f7e9                      		BRNE delay_extended_loop
000183 95ca                      		DEC  R28
000184 f7d9                      		BRNE delay_extended_loop
000185 91af                      		POP R26
000186 91bf                      		POP R27
000187 91cf                      		POP R28
000188 9508                      		RET
                                 
                                 .include	"Serial.inc"	; Serial_init,get,send
                                 
                                 ;
                                 ; Suboutines used for serial communication using
                                 ; the Atmega8515's USART functionality
                                 ;
                                 
                                 ; Important configuration values
                                 .EQU BAUD = 25
                                 .EQU UTCLB = $18
                                 .EQU FRAME = $86
                                 
                                 ;
                                 ; Subroutine used to initialize the UART
                                 ; functionality of the Atmega8515 microcontroller
                                 ;
                                 Serial_init:
                                 		; Sets the baud rate
000189 e000                      		LDI R16, $00
00018a bd00                      		OUT UBRRH, R16
00018b e109                      		LDI R16, BAUD
00018c b909                      		OUT UBRRL, R16
                                 		; Sets the control and status
00018d e108                      		LDI R16, UTCLB
00018e b90a                      		OUT UCSRB, R16
                                 		; Sets the frame properties
00018f e806                      		LDI R16, FRAME
000190 bd00                      		OUT UCSRC, R16
000191 9508                      		RET
                                 
                                 ;
                                 ; Subroutine used to recieve a single byte of data
                                 ; through USART on the Atmega8515 microcontroller
                                 ;
                                 Serial_get:
000192 b12b                      		IN R18, UCSRA
000193 7820                      		ANDI R18, $80
000194 f3e9                      		BREQ Serial_get
000195 b12c                      		IN R18, UDR
000196 9508                      		RET
                                 
                                 ;
                                 ; Subroutine used to transmit a single byte of data
                                 ; through USART on the Atmega8515 microcontroller
                                 ;
                                 Serial_send:
000197 b92c                      		OUT UDR, R18
                                 Serial_wait:		; wait for a bit confirming reception
000198 b12b                      		IN R18, UCSRA
000199 3220                      		CPI R18, $20
00019a f3e9                      		BREQ Serial_wait
00019b 9508                      		RET
                                 
                                 ;
                                 ; Subroutine used to reliably send and recieve data
                                 ; between the Atmega8515 microcontroller and a 
                                 ; Raspberry Pi using a TCP-like style of communication
                                 ;
                                 simple_msg:
00019c e321                      		LDI R18, $31
00019d dff9                      		RCALL Serial_send
00019e dff3                      		RCALL Serial_get
                                 ready:
00019f e321                      		LDI R18, $31
0001a0 dff6                      		RCALL Serial_send
0001a1 dff0                      		RCALL Serial_get
0001a2 9508                      		RET
                                 
                                 
                                 ; Marker for end of code
0001a3 0000                      CHKSUM:	.db $00,$00
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8515" register use summary:
x  :   4 y  :   8 z  :   3 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   5 r15:  11 r16:  93 r17:  15 r18:  22 r19:   3 r20:   3 
r21:   3 r22:   3 r23:   4 r24:   0 r25:   8 r26:  18 r27:  18 r28:   9 
r29:   3 r30:  10 r31:  10 
Registers used: 20 out of 35 (57.1%)

"ATmega8515" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   6 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 breq  :   4 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 brne  :  14 
brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 
cli   :   0 cln   :   0 clr   :  10 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   4 cpc   :   0 cpi   :   8 cpse  :   0 
dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   3 inc   :   3 ld    :   2 ldd   :   0 ldi   :  78 
lds   :   2 lpm   :   4 lsl   :   0 lsr   :   4 mov   :  11 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   3 or    :   0 
ori   :   0 out   :  13 pop   :   8 push  :  19 rcall :  56 ret   :  16 
reti  :   1 rjmp  :  22 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   2 sbr   :   0 sbrc  :   3 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   8 std   :   0 sts   :  17 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 33 out of 110 (30.0%)

"ATmega8515" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000348    708     76    784    8192   9.6%
[.dseg] 0x000060 0x000106      0     12     12     512   2.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
